datasource db {
    provider     = "cockroachdb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}
generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch","fullTextIndex" ]
}

model User {
  id           String     @id @default(uuid())
  email        String?     @unique
  name     String?
  passwordHash String?    // Store hashed passwords securely
  emailVerified Boolean   @default(false) // Track whether the email is verified
  verificationToken String? @unique   // Store verification tokens for email verification
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  image       String?
  role       String?     
  coursesCreated Course[]   @relation
//   coursesCreated Course[]  @relation


}

model Session {
  id        String  @id @db.Uuid 
  sid       String  @unique
  data      String  @db.String(2048)
  expiresAt DateTime
}


model verificationToken {
    id           String     @id @default(uuid())
    identifier   String?     
    email        String?     
    
    token        String?     @unique
    expires     DateTime
    
    @@unique([identifier, token])
    
}



model Category {
    id     String   @id @default(uuid())
    name   String   @unique
    course Course[]
}

model ProgramminLanguage {
    id   String @id @default(uuid())
    name String @unique
    chapter Chapter[]
}


model Type {
    id      String    @id @default(uuid())
    name    String    @unique
    course  Course[]
    chapter Chapter[]

    @@index([id])
}

model Course {
    id          String   @id @default(uuid())
    userId      String
    userName    String?
    userImage   String?
    title       String
    description String?
    imageUrl    String?
    price       Float
    isPublished Boolean  @default(false)
    categoryId  String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    typeId      String?
    rating      Float?
    authorId   String?
    author     User? @relation(fields: [authorId], references: [id])

    // author     User? @relation(fields: [authorId], references: [id])

    category    Category?    @relation(fields: [categoryId], references: [id])
    attachments Attachment[]
    chapters    Chapter[]    @relation(name: "courses")
    chapterType Chapter[]    @relation(name: "types")
    purchases   Purchase[]
    types       Type?        @relation(fields: [typeId], references: [id])
    userProgress  UserProgress[]

    @@index([typeId])
    @@index([categoryId])
    @@index([title])
}

model Author {  
  id           String     @id @default(uuid())
  name         String   @unique
  bio          String?
  website      String?
  imageUrl     String?
//   courses      Course[]  @relation
}

model Chapter {
    id           String         @id @default(uuid())
    title        String
    description  String?
    course       Course         @relation(name: "courses", fields: [courseId], references: [id], onDelete: Cascade)
    videoUrl     String?
    isFree       Boolean        @default(false)
    isPublished  Boolean        @default(false)
    position     Int
    muxData      MuxData?
    userProgress UserProgress[]
    questions    Question[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    courseId     String
    typeId       String?
    types        Course?        @relation(name: "types", fields: [typeId], references: [id], map: "Chapter_types")
    Type         Type?          @relation(fields: [typeId], references: [id])
    chapterType  String?
    taskDescription String?
    imageUrl   String?
    taskCriteria String?
    grade        String?
    explanation  String?
    codeSnippet  String?
    rightAnswer  String?
    programmingLanguageId String?
    programmingLanguage ProgramminLanguage? @relation(fields: [programmingLanguageId], references: [id])
    questionId String?

    @@index([programmingLanguageId])
    @@index([courseId])
    @@index([typeId])
}

model Question {
    id        String   @id @default(uuid())
    question  String
    option   String
    isCorrect Boolean
    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([chapterId])
    
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    url       String
    courseId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@index([courseId])
}

model MuxData {
    id         String @id @default(uuid())
    playbackId String
    assetId    String

    chapterId String  @unique
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id        String  @id @default(uuid())
    userId    String
    chapterId String
    courseId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    course      Course   @relation(fields: [courseId], references: [id])
    isCompleted Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    grade      Int?
    explanation String?

    @@index([chapterId])
    @@index([courseId])
    @@unique([userId, chapterId])
}
model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
    id               String   @id @default(uuid())
    userId           String
    stripeCustomerId String   @unique
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
