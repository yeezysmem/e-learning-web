generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model verificationToken {
  id         String   @id @default(uuid())
  identifier String?
  email      String?
  token      String?  @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id     String   @id @default(uuid())
  name   String   @unique
  course Course[]
}


model ProgramminLanguage {
  id      String    @id @default(uuid())
  name    String    @unique
  version String?
  chapter Chapter[]

  @@unique([name, version])
}

model Type {
  id      String    @id @default(uuid())
  name    String    @unique
  course  Course[]
  chapter Chapter[]

  @@index([id])
}

model Course {
  id           String         @id @default(uuid())
  userId       String
  userName     String?
  userImage    String?
  title        String
  description  String?
  imageUrl     String?
  price        Float
  isPublished  Boolean        @default(false)
  categoryId   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  typeId       String?
  authorId     String?
  rating       Float?
  level      String?
  category     Category?      @relation(fields: [categoryId], references: [id])

  attachments  Attachment[]
  chapters     Chapter[]      @relation("courses")
  chapterType  Chapter[]      @relation("types")
  purchases    Purchase[]
  types        Type?          @relation(fields: [typeId], references: [id])
  userProgress UserProgress[]
  @@index([typeId])
  @@index([categoryId])
  @@index([title])

}

model Author {
  id       String  @id @default(uuid())
  name     String  @unique
  bio      String?
  website  String?
  imageUrl String?
}

model Chapter {
  id                    String              @id @default(uuid())
  title                 String
  description           String?
  videoUrl              String?
  isFree                Boolean             @default(false)
  isPublished           Boolean             @default(false)
  position              Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  courseId              String
  typeId                String?
  chapterType           String?
  taskDescription       String?
  imageUrl              String?
  taskCriteria          String?
  grade                 String?
  codeSnippet           String?
  explanation           String?
  programmingLanguageId String?
  questionId            String?
  rightAnswer           String?
  languageVersion       String?
  course                Course              @relation("courses", fields: [courseId], references: [id], onDelete: Cascade)
  muxData               MuxData?
  userProgress          UserProgress[]
  questions             Question[]
  types                 Course?             @relation("types", fields: [typeId], references: [id], map: "Chapter_types")
  Type                  Type?               @relation(fields: [typeId], references: [id])
  programmingLanguage   ProgramminLanguage? @relation(fields: [programmingLanguageId], references: [id])

  @@index([programmingLanguageId])
  @@index([courseId])
  @@index([typeId])
}

model Question {
  id        String   @id @default(uuid())
  question  String
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCorrect Boolean
  option    String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  playbackId String
  assetId    String
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  explanation String?
  grade       Int?
  preferences String?
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@index([courseId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UserRecomendations {
  id              String   @id @default(uuid())
  userId          String
  preferences     String
  recommendations String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserPreferences {
  id              String   @id @default(uuid())
  userId          String
  preferences     String
  recommendations String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
